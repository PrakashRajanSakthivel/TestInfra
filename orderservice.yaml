---
apiVersion: v1
kind: Namespace
metadata:
  name: sd-dev
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderservice-config
  namespace: sd-dev
data:
  appsettings.json: |
    {
      "Logging": {
        "LogLevel": {
          "Default": "Information",
          "Microsoft.AspNetCore": "Information"
        }
      },
      "AllowedHosts": "*",
      "ConnectionStrings": {
        "OrderDatabase": "Data Source=host.docker.internal;Initial Catalog=OrderServiceDb;User ID=psadmin;Password=Password-1.?;TrustServerCertificate=True;"
      },
      "Jwt": {
        "Issuer": "SmartOrderSystem",
        "Audience": "SmartOrderSystemUsers",
        "SecretKey": "VerySecretKeyForSigningTokens123!"
      },
      "Serilog": {
      "Using": ["Serilog.Sinks.Console", "Serilog.Sinks.Elasticsearch"],
      "MinimumLevel": {
        "Default": "Information",
        "Override": {
          "Microsoft": "Warning",
          "System": "Warning",
          "Microsoft.AspNetCore": "Information" 
        }
      },
      "WriteTo": [
        {
          "Name": "Console"
        },
        {
          "Name": "Elasticsearch",
          "Args": {
            "nodeUris": "http://host.docker.internal:9200",
            "indexFormat": "orderservice-logs",
            "autoRegisterTemplate": true,
            "batchPostingLimit": 10,          
            "period": 2,                       
            "inlineFields": true,               
            "bufferBaseFilename": "./logs/elasticsearch-buffer", 
            "emitEventFailure": "WriteToSelfLog",
            "queueSizeLimit": 10000           
          }
        }
      ],
      "Enrich": ["FromLogContext", "WithMachineName", "WithProcessId"],
      "Properties": {
        "Application": "OrderService",
        "Environment": "Development"
      }
     }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderservice
  namespace: sd-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orderservice
  template:
    metadata:
      labels:
        app: orderservice
      # annotations:
      #   sidecar.istio.io/inject: "false"        # Deployment port (targets 8080)
    spec:
      resources:
        requests:
          cpu: "50m"
          memory: "16Mi"
        limits:
          cpu: "80m"
          memory: "32Mi"
      containers:
        - name: orderservice
          image: ordersvc:latest 
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080       # Ensure app exposes metrics here
          volumeMounts:
            - name: config-volume
              mountPath: /app/appsettings.json
              subPath: appsettings.json
      volumes:
        - name: config-volume
          configMap:
            name: orderservice-config
---
apiVersion: v1
kind: Service
metadata:
  name: orderservice
  namespace: sd-dev
  # annotations:
  #   prometheus.io/scrape: "true" 
  #   prometheus.io/probe: "true"       # Optional: Enable scraping via Service
  #   prometheus.io/port: "8080"        # Matches containerPort
  #   prometheus.io/path: "/metrics"  # Default path for metrics
    # sidecar.istio.io/inject: "false"        # Service port (targets 8080)
spec:
  type: NodePort
  selector:
    app: orderservice
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30080